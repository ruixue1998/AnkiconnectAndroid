# .github/workflows/build-debug-apk.yml

name: Build Debug APK

# 1. 触发器：允许你从 "Actions" 标签页手动运行此工作流
on:
  workflow_dispatch:

jobs:
  build:
    # 2. 运行环境：使用最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    steps:
      # 3. 签出代码：下载你的仓库代码到 Actions 运行器中
      - name: Checkout code
        uses: actions/checkout@v4

      # 4. 设置 Java 环境：安卓编译需要 JDK（Java Development Kit）
      #    这个项目（AnkiconnectAndroid）似乎使用 Java 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'gradle'

      # 5. 缓存 Gradle 依赖：加快未来的构建速度
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. 授予 gradlew 执行权限：这是运行 Gradle 命令所必需的
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 7. 运行 Gradle 构建：这是核心步骤，'assembleDebug' 会编译并打包 Debug APK
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # 8. 上传构建产物：将生成的 .apk 文件保存为 "Artifact"（产物）
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk  # 产物的名称
          path: app/build/outputs/apk/debug/app-debug.apk # .apk 文件的标准路径
